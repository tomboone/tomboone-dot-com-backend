#file: noinspection UndefinedAction
name: Terraform, Build, and Deploy to Stage

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'app/**'
      - 'pyproject.toml'
      - 'alembic/**'
      - 'alembic.ini'
      - '.github/workflows/build-deploy.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_USE_OIDC: true
  TF_VAR_service_plan_name: ${{ secrets.SERVICE_PLAN_NAME }}
  TF_VAR_service_plan_rg_name: ${{ secrets.SERVICE_PLAN_RG_NAME }}
  TF_VAR_mysql_flexible_server_name: ${{ secrets.MYSQL_FLEXIBLE_SERVER_NAME }}
  TF_VAR_mysql_flexible_server_rg_name: ${{ secrets.MYSQL_FLEXIBLE_SERVER_RG_NAME }}
  TF_VAR_log_analytics_workspace_name: ${{ secrets.LOG_ANALYTICS_WORKSPACE_NAME }}
  TF_VAR_log_analytics_workspace_rg_name: ${{ secrets.LOG_ANALYTICS_WORKSPACE_RG_NAME }}
  TF_VAR_mysql_admin_username: ${{ secrets.MYSQL_ADMIN_USERNAME }}
  TF_VAR_mysql_admin_password: ${{ secrets.MYSQL_ADMIN_PASSWORD }}
  TF_VAR_api_app_tenant_id: ${{ secrets.API_APP_TENANT_ID }}
  TF_VAR_api_app_client_id: ${{ secrets.API_APP_CLIENT_ID }}
  TF_VAR_front_end_url: ${{ secrets.FRONT_END_URL }}
  TF_VAR_azure_front_end_url: ${{ secrets.AZURE_FRONT_END_URL }}
  TF_WORKING_DIR: ./terraform
  PYTHON_VERSION: '3.12'

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    outputs:
      app_service_name: ${{ steps.get_outputs.outputs.app_service_name }}
      app_service_resource_group_name: ${{ steps.get_outputs.outputs.app_service_resource_group_name }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_SA }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}"

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve

      - name: Get Terraform Outputs
        id: get_outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          APP_NAME=$(terraform output -raw app_service_name)
          RG_NAME=$(terraform output -raw app_service_resource_group_name)

          echo "app_service_name=$APP_NAME" >> "$GITHUB_OUTPUT"
          echo "app_service_resource_group_name=$RG_NAME" >> "$GITHUB_OUTPUT"

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Configure Poetry to build locally
        run: poetry config virtualenvs.in-project true

      - name: Build with Poetry
        run: |
          # Install dependencies
          poetry install --without dev
          
          # Force reinstall cryptography with no binary to ensure compatibility
          poetry run pip install --force-reinstall --no-binary cryptography cryptography

      - name: Construct deployment artifact
        run: |
          # Get virtual environment path
          VENV_PATH=$(poetry env info --path)
          
          # Create deployment package with all dependencies
          mkdir -p deployment_package
          
          # Copy installed packages (site-packages)
          cp -r $VENV_PATH/lib/python*/site-packages/* deployment_package/
          
          # Copy application code and config
          cp alembic.ini deployment_package/
          cp -r alembic app deployment_package/

      - name: Zip artifact for deployment
        run: |
          cd deployment_package
          zip -r ../python-app.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: python-app.zip

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    needs: [build, terraform]

    env:
      APP_NAME: ${{ needs.terraform.outputs.app_service_name }}
      RG_NAME: ${{ needs.terraform.outputs.app_service_resource_group_name }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v5
        with:
          name: python-app

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Unzip deployment artifact
        run: unzip python-app.zip -d app

      - name: Deploy to Production
        uses: Azure/webapps-deploy@v2
        with:
          app-name: ${{ env.APP_NAME }}
          package: 'app'
